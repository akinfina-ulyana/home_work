Author.objects.filter(first_name="John")
Author.objects.filter(~Q(last_name="Doe"))
Book.objects.filter(price__lt=500)
Book.objects.filter(price__lte=300)
Book.objects.filter(price__gt=1000)
Book.objects.filter(price__gte=750)
Book.objects.filter(title__contains="django")
Book.objects.filter(title__icontains="python")
Book.objects.filter(title__startswith="Advanced")
Book.objects.filter(title__istartswith="pro")
Book.objects.filter(title__endswith="Guide")
Book.objects.filter(title__iendswith="tutorial")
Review.objects.filter(comment__isnull=True)
Review.objects.filter(comment__isnull=False)
Author.objects.filter(id__in=[1, 3, 5])

start_date = datetime(2023, 1, 1)
end_date = datetime(2023, 12, 31)
Book.objects.filter(published_date__gte=start_date, published_date__lte=end_date)

Book.objects.filter(title__regex=r'^Python\b')
Author.objects.filter(last_name__iregex=r'^mc')

Book.objects.filter(published_date__year=2024)
Book.objects.filter(published_date__month=6)
Review.objects.filter(created_at__day=11)
Book.objects.filter(published_date__week=23)
Review.objects.annotate(weekday=ExtractWeekDay('created_at')).filter(weekday=3)
Book.objects.filter(published_date__month__in=[4, 5, 6]) или Book.objects.filter(publication_date__quarter=2)
Review.objects.filter(created_at__date=date(2023, 5, 15))
Review.objects.filter(created_at__time=time(15, 30))
Review.objects.filter(created_at__hour=15)
Review.objects.filter(created_at__minute=30)
Review.objects.filter(created_at__second=0)


Books.objects.filter(author__email="author@example.com")
Book.objects.filter(author__last_name__icontains="smith")
Author.objects.annotate(book_count=Count('books')).filter(book_count__gt=5)

Book.objects.filter(metadata__genre="fiction")
Book.objects.filter(metadata__tags__icontains="bestseller")

Book.objects.filter(price=models.F('discount'))
Book.objects.filter(price__gt=F('discount'))

Author.objects.filter( Q(first_name="Alice") | ~Q(last_name="Brown"))
Book.objects.annotate(avg_rating=Avg('reviews__rating')).order_by('-avg_rating')
Book.objects.annotate(final_price=ExpressionWrapper(F('price') - F('discount'), output_field=DecimalField(max_digits=6, decimal_places=2)))

Book.objects.select_related('author').all()
Author.objects.prefetch_related('books').all()














